<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vscode cpp 多文件工程进行编译调试</title>
    <url>/2021/01/15/vscode_cmake/</url>
    <content><![CDATA[<p>之前已经在ubuntu上搭建好了vscode + opencv + zbar 编译调试cpp文件的环境。不过经测试单单像之前一样配置完四个json文件，只能运行单个cpp文件工程，对多个cpp文件工程无能为力。为此，我经过研究得到如下方法。</p>
<p>在此之前，首先献上之前的c_cpp_properties，settings，tasks，launch，四json文件的相关配置：(tasks launch 最为重要)</p>
<p>c_cpp_properties:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Linux&quot;,</span><br><span class="line">            &quot;includePath&quot;: [</span><br><span class="line">                &quot;$&#123;workspaceFolder&#125;&#x2F;**&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;local&#x2F;include&#x2F;opencv&quot;, &#x2F;&#x2F;请确保你的opencv opencv2头文件夹安装在这个目录</span><br><span class="line">                &quot;&#x2F;usr&#x2F;local&#x2F;include&#x2F;opencv2&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;local&#x2F;include&#x2F;zbar&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;include&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;defines&quot;: [],</span><br><span class="line">            &quot;compilerPath&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;gcc&quot;,</span><br><span class="line">            &quot;cStandard&quot;: &quot;c11&quot;,</span><br><span class="line">            &quot;cppStandard&quot;: &quot;c++17&quot;,</span><br><span class="line">            &quot;intelliSenseMode&quot;: &quot;clang-x64&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<a id="more"></a>

<p>settings:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;files.associations&quot;: &#123;</span><br><span class="line">        &quot;iostream&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;ostream&quot;: &quot;cpp&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>launch:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Use IntelliSense to learn about possible attributes.</span><br><span class="line">    &#x2F;&#x2F; Hover to view descriptions of existing attributes.</span><br><span class="line">    &#x2F;&#x2F; For more information, visit: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;(gdb) Launch&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;&#x2F;$&#123;fileBasenameNoExtension&#125;.out&quot;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: true,</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;gdb&quot;,</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;g++&quot;,</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>tasks:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; See https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkId&#x3D;733558</span><br><span class="line">    &#x2F;&#x2F; for the documentation about the tasks.json format</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;command&quot;: &quot;g++&quot;,</span><br><span class="line">    &quot;args&quot;: [</span><br><span class="line">        &quot;-g&quot;, </span><br><span class="line">        &quot;-std&#x3D;c++11&quot;, </span><br><span class="line">        &quot;$&#123;file&#125;&quot;, </span><br><span class="line">        &quot;-o&quot;, </span><br><span class="line">        &quot;$&#123;fileBasenameNoExtension&#125;.o&quot;,</span><br><span class="line">        &quot;-I&quot;, &quot;&#x2F;usr&#x2F;local&#x2F;include&quot;,</span><br><span class="line">        &quot;-I&quot;, &quot;&#x2F;usr&#x2F;local&#x2F;include&#x2F;opencv&quot;,</span><br><span class="line">        &quot;-I&quot;, &quot;&#x2F;usr&#x2F;local&#x2F;include&#x2F;opencv2&quot;,</span><br><span class="line">        &quot;-L&quot;, &quot;&#x2F;usr&#x2F;local&#x2F;lib&quot;,</span><br><span class="line">        &quot;-l&quot;, &quot;opencv_core&quot;,</span><br><span class="line">        &quot;-l&quot;, &quot;opencv_imgproc&quot;,</span><br><span class="line">        &quot;-l&quot;, &quot;opencv_imgcodecs&quot;,</span><br><span class="line">        &quot;-l&quot;, &quot;opencv_video&quot;,</span><br><span class="line">        &quot;-l&quot;, &quot;opencv_ml&quot;,</span><br><span class="line">        &quot;-l&quot;, &quot;opencv_highgui&quot;,</span><br><span class="line">        &quot;-l&quot;, &quot;opencv_objdetect&quot;,</span><br><span class="line">        &quot;-l&quot;, &quot;opencv_flann&quot;,</span><br><span class="line">        &quot;-l&quot;, &quot;opencv_imgcodecs&quot;,</span><br><span class="line">        &quot;-l&quot;, &quot;opencv_photo&quot;,</span><br><span class="line">        &quot;-l&quot;, &quot;opencv_videoio&quot;,</span><br><span class="line">        &quot;-l&quot;, &quot;zbar&quot;</span><br><span class="line">    ],&#x2F;&#x2F; 编译命令参数</span><br><span class="line">    &quot;problemMatcher&quot;:&#123;</span><br><span class="line">        &quot;owner&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;fileLocation&quot;:[</span><br><span class="line">            &quot;relative&quot;,</span><br><span class="line">            &quot;$&#123;workspaceFolder&#125;&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;pattern&quot;:[</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;regexp&quot;: &quot;^([^\\\\s].*)\\\\((\\\\d+,\\\\d+)\\\\):\\\\s*(.*)$&quot;,</span><br><span class="line">                &quot;file&quot;: 1,</span><br><span class="line">                &quot;location&quot;: 2,</span><br><span class="line">                &quot;message&quot;: 3</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;group&quot;: &#123;</span><br><span class="line">        &quot;kind&quot;: &quot;build&quot;,</span><br><span class="line">        &quot;isDefault&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h2><p>首先需要准备好工具cmake</p>
<p>按照前面的四个文件配置，就可以实现opencv进行图像处理</p>
<h2 id="2-开始进行多文件调试配置"><a href="#2-开始进行多文件调试配置" class="headerlink" title="2.开始进行多文件调试配置"></a>2.开始进行多文件调试配置</h2><p>我们的工程中具有如下文件</p>
<p><img src="/images/20210115/9.png"></p>
<h3 id="2-1-编写CmakeLists-txt"><a href="#2-1-编写CmakeLists-txt" class="headerlink" title="2.1 编写CmakeLists.txt"></a>2.1 编写CmakeLists.txt</h3><p>在工程的根目录下创建CmakeLists.txt</p>
<p><img src="/images/20210115/10.png"></p>
<p>build文件夹为之后创建，编写CmakeLists.txt如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">#设置CMAKE最低版本</span><br><span class="line">CMAKE_MINIMUM_REQUIRED(VERSION 2.8)</span><br><span class="line"></span><br><span class="line">set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -g&quot;)</span><br><span class="line">#set(CMAKE_BUILD_TYPE Release) 这句有的话需要注释掉</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#设置项目名称</span><br><span class="line">SET(PROJECT_NAME drone_test)</span><br><span class="line">#建立项目</span><br><span class="line">PROJECT($&#123;PROJECT_NAME&#125;)</span><br><span class="line">#寻找OpenCV库</span><br><span class="line">FIND_PACKAGE(OpenCV REQUIRED)</span><br><span class="line">INCLUDE_DIRECTORIES($&#123;OpenCV_INCLUDE_DIRS&#125;)</span><br><span class="line">#打印调试信息</span><br><span class="line">MESSAGE(STATUS &quot;Project: $&#123;PROJECT_NAME&#125;&quot;)</span><br><span class="line">MESSAGE(STATUS &quot;OpenCV library status:&quot;)</span><br><span class="line">MESSAGE(STATUS &quot;    version: $&#123;OpenCV_VERSION&#125;&quot;)</span><br><span class="line">MESSAGE(STATUS &quot;    libraries: $&#123;OpenCV_LIBS&#125;&quot;)</span><br><span class="line">MESSAGE(STATUS &quot;    include path: $&#123;OpenCV_INCLUDE_DIRS&#125;&quot;)</span><br><span class="line"></span><br><span class="line">#获取代码，在项目中，将所有代码都放在src文件夹中</span><br><span class="line">AUX_SOURCE_DIRECTORY(src DIR_SRCS)</span><br><span class="line">MESSAGE(STATUS &quot;Src file: $&#123;DIR_SRCS&#125;&quot;)</span><br><span class="line">#编译可执行程序</span><br><span class="line">ADD_EXECUTABLE($&#123;PROJECT_NAME&#125; $&#123;DIR_SRCS&#125;)</span><br><span class="line">#添加链接库</span><br><span class="line">TARGET_LINK_LIBRARIES($&#123;PROJECT_NAME&#125; $&#123;OpenCV_LIBS&#125;)</span><br></pre></td></tr></table></figure></div>
<p><strong>注意：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -g&quot;)</span><br></pre></td></tr></table></figure></div>
<p>此句为将cmake设置为debug模式，否则在vscode中加设断点，程序也不会命中断点</p>
<p>建立build文件夹</p>
<h2 id="3-重新配置-Tasks-json-launch-json"><a href="#3-重新配置-Tasks-json-launch-json" class="headerlink" title="3.重新配置 Tasks.json,launch.json:"></a>3.重新配置 Tasks.json,launch.json:</h2><p><strong>Tasks:</strong></p>
<p>两个 task，第一个 cmake 为使用 cmake 生成指定的 makefile，每次当文件目录结构有更改时需要执行一遍 cmake；第二个 task 为 make。group设置为 true，标识其为一个编译构建任务。在两个task外还需要设置一个options将路径切换至当前工作空间堆build目录下，以在此目录中生成make文件以及编译后的结果，可以将此目录添加到gitignore中。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;options&quot;: &#123;</span><br><span class="line">        &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&#x2F;drone_test&#x2F;build&quot;</span><br><span class="line">    &#125;,&#x2F;&#x2F;这个要加上，否则编译出问题</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;cmake&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;cmake&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-G&quot;,</span><br><span class="line">                &quot;Unix Makefiles&quot;,</span><br><span class="line">                &quot;-DCMAKE_BUILD_TYPE&#x3D;Debug&quot;,</span><br><span class="line">                &quot;..&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;make&quot;,&#x2F;&#x2F;&#x2F; 下面的make就是这里</span><br><span class="line">            &quot;group&quot;: &#123;</span><br><span class="line">                &quot;kind&quot;: &quot;build&quot;,</span><br><span class="line">                &quot;isDefault&quot;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;make&quot;,</span><br><span class="line">            &quot;args&quot;: []</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>“cwd:” 此处路径需要根据实际调整保持正确(基本上不同工程不要根据不同路径进行更改)，下同</p>
<p><strong>launch:</strong></p>
<p>program为刚刚在 CMakeLists 中设置的编译生成的程序文件，位置要指定正确；preLaunchTask是每次执行 debug 前要执行的任务，也就是每次debug之前要make一下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Use IntelliSense to learn about possible attributes.</span><br><span class="line">    &#x2F;&#x2F; Hover to view descriptions of existing attributes.</span><br><span class="line">    &#x2F;&#x2F; For more information, visit: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;(gdb) Launch&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;&#x2F;drone_test&#x2F;build&#x2F;drone_test&quot;,  &#x2F;&#x2F;update by 2020&#x2F;8&#x2F;15，由bin改为build</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: true,</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;make&quot;  &#x2F;&#x2F;这个重要，task中的make</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


<h2 id="4-设置断点，编译、调试"><a href="#4-设置断点，编译、调试" class="headerlink" title="4.设置断点，编译、调试"></a>4.设置断点，编译、调试</h2><p>断点调试： F5 （启动调试），F11（单步调试）<br>在此之前需要进行cmake make:</p>
<p><img src="/images/20210115/4.png"></p>
<p>设置成功会在断点出停止，继续单步执行，直至程序结束，程序运行成功</p>
<p><img src="/images/20210115/7.png"></p>
<h2 id="5-遇到的问题（已解决）"><a href="#5-遇到的问题（已解决）" class="headerlink" title="5.遇到的问题（已解决）"></a>5.遇到的问题（已解决）</h2><p><img src="/images/20210115/6.png"></p>
<p>经过上面的配置后，以上问题已得到解决</p>
<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>总的来说，vscode配置调试程序要是比较复杂的，最好能弄懂四个配置文件中节点的具体意义。vscode毕竟还是一个文本编译器，要将其作为编译器进行项目作业还是比较麻烦的</p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>cmake</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo + Github搭建个人博客</title>
    <url>/2021/01/13/Hexo-create/</url>
    <content><![CDATA[<p>终于根据教程搭建完了自己的博客，那么作为第一篇博客，这里就介绍一下使用Hexo + Github搭建博客的过程，算是一个记录，也为之后需要帮助的人提供帮助。(顺便用来练练手)</p>
<p>这里就不介绍Hexo和Github了，直接进入正题</p>
<a id="more"></a>

<h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h2><p>事先需要准备好Github账号，并统一使用Git bash</p>
<h3 id="1-1-环境搭建"><a href="#1-1-环境搭建" class="headerlink" title="# 1.1 环境搭建"></a># 1.1 环境搭建</h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>
<p>Node.js: <a href="https://nodejs.org/zh-cn/">nodejs.org/zh-cn</a><br>Git: <a href="https://git-scm.com/downloads">git-scm.com/downloads</a></p>
<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>
<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 node -v、npm -v 和 git –version 并回车，如下图出现程序版本号即可。</p>
<p><img src="/images/20210113/1.jpg"></p>
<p>Github注册及配置此处省略。</p>
<h2 id="2-创建-Github-Pages-仓库"><a href="#2-创建-Github-Pages-仓库" class="headerlink" title="2.创建 Github Pages 仓库"></a>2.创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>
<p>1.Repository name 中输入 用户名.github.io<br>2.勾选 “Initialize this repository with a README”<br>3.Description 选填</p>
<p>填好后点击 Create repository 创建。</p>
<p><img src="/images/20210113/2.jpg"></p>
<p>创建后默认自动启用 HTTPS，博客地址为：https://用户名.github.io</p>
<h2 id="3-本地安装-Hexo-博客程序"><a href="#3-本地安装-Hexo-博客程序" class="headerlink" title="3.本地安装 Hexo 博客程序"></a>3.本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p>
<h3 id="3-1-安装-Hexo"><a href="#3-1-安装-Hexo" class="headerlink" title="# 3.1 安装 Hexo"></a># 3.1 安装 Hexo</h3><p>使用 npm 一键安装 Hexo 博客程序：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>
<p><img src="/images/20210113/3.jpg"></p>
<h3 id="3-2-Hexo-初始化和本地预览"><a href="#3-2-Hexo-初始化和本地预览" class="headerlink" title="# 3.2 Hexo 初始化和本地预览"></a># 3.2 Hexo 初始化和本地预览</h3><h4 id="初始化并安装所需组件："><a href="#初始化并安装所需组件：" class="headerlink" title="初始化并安装所需组件："></a>初始化并安装所需组件：</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ hexo init      # 初始化</span><br><span class="line">$ npm install    # 安装组件</span><br></pre></td></tr></table></figure></div>
<p>完成后依次输入下面命令，<strong>启动本地服务器进行预览：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ hexo g    #生成页面</span><br><span class="line">$ hexo s    #启动预览</span><br></pre></td></tr></table></figure></div>
<p><strong>访问</strong> <a href="http://localhost:4000，出现">http://localhost:4000，出现</a> Hexo 默认页面，本地博客<strong>安装成功</strong>！</p>
<p><img src="/images/20210113/4.jpg"></p>
<p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。</p>
<p>Hexo 博客文件夹目录结构如下：</p>
<p><img src="/images/20210113/5.jpg"></p>
<h2 id="4-部署-Hexo-到-GitHub-Pages"><a href="#4-部署-Hexo-到-GitHub-Pages" class="headerlink" title="4.部署 Hexo 到 GitHub Pages"></a>4.部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>
<p>首先安装 <strong>hexo-deployer-git：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>
<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名&#x2F;用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></div>
<p>完成！这时访问我们的 GitHub 域名 https://用户名.github.io 就可以看到 Hexo 网站了。</p>
<p><strong>Ps:</strong> 搭建完成后使用的Github的子域名，可以通过购买服务器替换 Github 域名，更加个性化和专业化，这里不做介绍。</p>
<h2 id="5-开始使用"><a href="#5-开始使用" class="headerlink" title="5.开始使用"></a>5.开始使用</h2><h3 id="5-1-发布文章"><a href="#5-1-发布文章" class="headerlink" title="# 5.1 发布文章"></a># 5.1 发布文章</h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure></div>
<p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 vscode 编辑器在该文件中撰写文章了。</p>
<p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是一下几条命令命令。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean      #清理缓存</span><br><span class="line">$ hexo g          #生成页面</span><br><span class="line">$ hexo s          #预览页面</span><br><span class="line">$ hexo d          #部署发布</span><br></pre></td></tr></table></figure></div>
<p>以上四条命令<strong>缺一不可</strong>。</p>
<p>同时，如果运行以上四条命令后，博客首页<strong>没有更新</strong>，且有如下警告：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF in tags&#x2F;index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br></pre></td></tr></table></figure></div>
<p>则表示 <strong>路径中存在 / 的符号转义问题 如：创建文章时命名为中文</strong>，一般都出现这个小问题。</p>
<p>可在博客目录下 使用 Git bash ，输入如下命令：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ git config --global core.autocrlf false</span><br></pre></td></tr></table></figure></div>
<p>在重新生成文件部署即可</p>
<p>若此时预览和部署仍然不同步，则使用 shift + F5 刷新，一般可解决问题。</p>
<h3 id="5-2-网站设置"><a href="#5-2-网站设置" class="headerlink" title="# 5.2 网站设置"></a># 5.2 网站设置</h3><p>我参考的是这篇博客 <a href="https://www.jianshu.com/p/3a05351a37dc">Hexo的Next主题的详细配置</a>，介绍的非常详细，有时间我也会来相机介绍一下 Next 主题的配置，以防丢失。</p>
<p>另外推荐参考 <a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a></p>
<p><strong>注意：</strong>编写 .md 文件时，冒号后面都需要<strong>加上空格</strong></p>
<h3 id="5-3-更换主题"><a href="#5-3-更换主题" class="headerlink" title="# 5.3 更换主题"></a># 5.3 更换主题</h3><p>在 <a href="https://hexo.io/themes/">Themes|Hexo</a> 选择一个喜欢的主题，比如 NexT，进入网站目录打开 Git Bash Here 下载主题：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure></div>
<p>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p>
<p><strong>注意：</strong>hexo在5.0之后把swig给删除了需要自己手动安装</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$  npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure></div>
<h3 id="5-4-常用命令"><a href="#5-4-常用命令" class="headerlink" title="# 5.4 常用命令"></a># 5.4 常用命令</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">$ hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">$ hexo g                # 生成页面</span><br><span class="line">$ hexo d                # 部署</span><br><span class="line">$ hexo g -d             # 生成页面并部署</span><br><span class="line">$ hexo s                # 本地预览</span><br><span class="line">$ hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">$ hexo help             # 帮助</span><br></pre></td></tr></table></figure></div>
<h2 id="6-常见问题"><a href="#6-常见问题" class="headerlink" title="6.常见问题"></a>6.常见问题</h2><h3 id="1-Hexo-设置显示文章摘要，首页不显示全文"><a href="#1-Hexo-设置显示文章摘要，首页不显示全文" class="headerlink" title="1.Hexo 设置显示文章摘要，首页不显示全文"></a>1.Hexo 设置显示文章摘要，首页不显示全文</h3><p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 &lt; ! - - more - - &gt; 进行分段。(! 与 - 之间无空格，所有字符之间均无空格)</p>
<p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Hexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。</p>
<p>可以说是一种比较极客的写博客方式，但是优势也是明显的——免费稳定省心，比较适合爱折腾研究的用户，或者没有在线发文需求的朋友。</p>
<h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><p><a href="https://www.jianshu.com/p/3a05351a37dc">Hexo的Next主题详细配置</a><br><a href="https://www.jianshu.com/p/56d99a3049a5">用Hexo写出第一篇博客</a><br><a href="https://blog.csdn.net/zemprogram/article/details/104288872">Hexo根目录下的_config.yml配置解释</a></p>
<p>强烈推荐：<br><a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
